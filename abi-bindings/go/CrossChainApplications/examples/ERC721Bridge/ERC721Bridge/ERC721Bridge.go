// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc721bridge

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/interfaces"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = interfaces.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC721BridgeMetaData contains all meta data concerning the ERC721Bridge contract.
var ERC721BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"CreateBridgeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinTeleporterVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinTeleporterVersion\",\"type\":\"uint256\"}],\"name\":\"MinTeleporterVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintBridgeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"}],\"name\":\"SubmitCreateBridgeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WARP_PRECOMPILE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"messageFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageFeeAmount\",\"type\":\"uint256\"}],\"name\":\"bridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeNFT\",\"type\":\"address\"}],\"name\":\"bridgedNFTContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bridgeTokenExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockchainID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nativeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeTokenURI\",\"type\":\"string\"}],\"name\":\"encodeCreateBridgeNFTData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeMintBridgeNFTData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeTransferBridgeNFTData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTeleporterVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"isTeleporterAddressPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenAddress\",\"type\":\"address\"}],\"name\":\"nativeToBridgedNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridgeNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"pauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"originSenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTeleporterMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contractExampleERC721\",\"name\":\"nativeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageFeeAmount\",\"type\":\"uint256\"}],\"name\":\"submitCreateBridgeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"}],\"name\":\"submittedBridgeNFTCreations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleporterRegistry\",\"outputs\":[{\"internalType\":\"contractTeleporterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"unpauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateMinTeleporterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ERC721BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721BridgeMetaData.ABI instead.
var ERC721BridgeABI = ERC721BridgeMetaData.ABI

// ERC721BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721BridgeMetaData.Bin instead.
var ERC721BridgeBin = ERC721BridgeMetaData.Bin

// DeployERC721Bridge deploys a new Ethereum contract, binding an instance of ERC721Bridge to it.
func DeployERC721Bridge(auth *bind.TransactOpts, backend bind.ContractBackend, teleporterRegistryAddress common.Address) (common.Address, *types.Transaction, *ERC721Bridge, error) {
	parsed, err := ERC721BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721BridgeBin), backend, teleporterRegistryAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Bridge{ERC721BridgeCaller: ERC721BridgeCaller{contract: contract}, ERC721BridgeTransactor: ERC721BridgeTransactor{contract: contract}, ERC721BridgeFilterer: ERC721BridgeFilterer{contract: contract}}, nil
}

// ERC721Bridge is an auto generated Go binding around an Ethereum contract.
type ERC721Bridge struct {
	ERC721BridgeCaller     // Read-only binding to the contract
	ERC721BridgeTransactor // Write-only binding to the contract
	ERC721BridgeFilterer   // Log filterer for contract events
}

// ERC721BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721BridgeSession struct {
	Contract     *ERC721Bridge     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721BridgeCallerSession struct {
	Contract *ERC721BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ERC721BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721BridgeTransactorSession struct {
	Contract     *ERC721BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC721BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721BridgeRaw struct {
	Contract *ERC721Bridge // Generic contract binding to access the raw methods on
}

// ERC721BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721BridgeCallerRaw struct {
	Contract *ERC721BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721BridgeTransactorRaw struct {
	Contract *ERC721BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721Bridge creates a new instance of ERC721Bridge, bound to a specific deployed contract.
func NewERC721Bridge(address common.Address, backend bind.ContractBackend) (*ERC721Bridge, error) {
	contract, err := bindERC721Bridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Bridge{ERC721BridgeCaller: ERC721BridgeCaller{contract: contract}, ERC721BridgeTransactor: ERC721BridgeTransactor{contract: contract}, ERC721BridgeFilterer: ERC721BridgeFilterer{contract: contract}}, nil
}

// NewERC721BridgeCaller creates a new read-only instance of ERC721Bridge, bound to a specific deployed contract.
func NewERC721BridgeCaller(address common.Address, caller bind.ContractCaller) (*ERC721BridgeCaller, error) {
	contract, err := bindERC721Bridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeCaller{contract: contract}, nil
}

// NewERC721BridgeTransactor creates a new write-only instance of ERC721Bridge, bound to a specific deployed contract.
func NewERC721BridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721BridgeTransactor, error) {
	contract, err := bindERC721Bridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeTransactor{contract: contract}, nil
}

// NewERC721BridgeFilterer creates a new log filterer instance of ERC721Bridge, bound to a specific deployed contract.
func NewERC721BridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721BridgeFilterer, error) {
	contract, err := bindERC721Bridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeFilterer{contract: contract}, nil
}

// bindERC721Bridge binds a generic wrapper to an already deployed contract.
func bindERC721Bridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC721BridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Bridge *ERC721BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Bridge.Contract.ERC721BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Bridge *ERC721BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.ERC721BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Bridge *ERC721BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.ERC721BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Bridge *ERC721BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Bridge *ERC721BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Bridge *ERC721BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.contract.Transact(opts, method, params...)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCaller) CREATEBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "CREATE_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCallerSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCaller) MINTBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "MINT_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCallerSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCaller) TRANSFERBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCallerSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC721Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ERC721Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC721Bridge *ERC721BridgeCaller) WARPPRECOMPILEADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "WARP_PRECOMPILE_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC721Bridge *ERC721BridgeSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ERC721Bridge.Contract.WARPPRECOMPILEADDRESS(&_ERC721Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC721Bridge *ERC721BridgeCallerSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ERC721Bridge.Contract.WARPPRECOMPILEADDRESS(&_ERC721Bridge.CallOpts)
}

// BridgedNFTContracts is a free data retrieval call binding the contract method 0x5aea9280.
//
// Solidity: function bridgedNFTContracts(address bridgeNFT) view returns(bool bridgeTokenExists)
func (_ERC721Bridge *ERC721BridgeCaller) BridgedNFTContracts(opts *bind.CallOpts, bridgeNFT common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "bridgedNFTContracts", bridgeNFT)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BridgedNFTContracts is a free data retrieval call binding the contract method 0x5aea9280.
//
// Solidity: function bridgedNFTContracts(address bridgeNFT) view returns(bool bridgeTokenExists)
func (_ERC721Bridge *ERC721BridgeSession) BridgedNFTContracts(bridgeNFT common.Address) (bool, error) {
	return _ERC721Bridge.Contract.BridgedNFTContracts(&_ERC721Bridge.CallOpts, bridgeNFT)
}

// BridgedNFTContracts is a free data retrieval call binding the contract method 0x5aea9280.
//
// Solidity: function bridgedNFTContracts(address bridgeNFT) view returns(bool bridgeTokenExists)
func (_ERC721Bridge *ERC721BridgeCallerSession) BridgedNFTContracts(bridgeNFT common.Address) (bool, error) {
	return _ERC721Bridge.Contract.BridgedNFTContracts(&_ERC721Bridge.CallOpts, bridgeNFT)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC721Bridge *ERC721BridgeCaller) CurrentBlockchainID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "currentBlockchainID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC721Bridge *ERC721BridgeSession) CurrentBlockchainID() ([32]byte, error) {
	return _ERC721Bridge.Contract.CurrentBlockchainID(&_ERC721Bridge.CallOpts)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC721Bridge *ERC721BridgeCallerSession) CurrentBlockchainID() ([32]byte, error) {
	return _ERC721Bridge.Contract.CurrentBlockchainID(&_ERC721Bridge.CallOpts)
}

// EncodeCreateBridgeNFTData is a free data retrieval call binding the contract method 0xbc28b4e0.
//
// Solidity: function encodeCreateBridgeNFTData(address nativeContractAddress, string nativeName, string nativeSymbol, string nativeTokenURI) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCaller) EncodeCreateBridgeNFTData(opts *bind.CallOpts, nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeTokenURI string) ([]byte, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "encodeCreateBridgeNFTData", nativeContractAddress, nativeName, nativeSymbol, nativeTokenURI)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeCreateBridgeNFTData is a free data retrieval call binding the contract method 0xbc28b4e0.
//
// Solidity: function encodeCreateBridgeNFTData(address nativeContractAddress, string nativeName, string nativeSymbol, string nativeTokenURI) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeSession) EncodeCreateBridgeNFTData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeTokenURI string) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeCreateBridgeNFTData(&_ERC721Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeTokenURI)
}

// EncodeCreateBridgeNFTData is a free data retrieval call binding the contract method 0xbc28b4e0.
//
// Solidity: function encodeCreateBridgeNFTData(address nativeContractAddress, string nativeName, string nativeSymbol, string nativeTokenURI) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCallerSession) EncodeCreateBridgeNFTData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeTokenURI string) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeCreateBridgeNFTData(&_ERC721Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeTokenURI)
}

// EncodeMintBridgeNFTData is a free data retrieval call binding the contract method 0xd29374b9.
//
// Solidity: function encodeMintBridgeNFTData(address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCaller) EncodeMintBridgeNFTData(opts *bind.CallOpts, nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "encodeMintBridgeNFTData", nativeContractAddress, recipient, tokenId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeMintBridgeNFTData is a free data retrieval call binding the contract method 0xd29374b9.
//
// Solidity: function encodeMintBridgeNFTData(address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeSession) EncodeMintBridgeNFTData(nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeMintBridgeNFTData(&_ERC721Bridge.CallOpts, nativeContractAddress, recipient, tokenId)
}

// EncodeMintBridgeNFTData is a free data retrieval call binding the contract method 0xd29374b9.
//
// Solidity: function encodeMintBridgeNFTData(address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCallerSession) EncodeMintBridgeNFTData(nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeMintBridgeNFTData(&_ERC721Bridge.CallOpts, nativeContractAddress, recipient, tokenId)
}

// EncodeTransferBridgeNFTData is a free data retrieval call binding the contract method 0xd861fd07.
//
// Solidity: function encodeTransferBridgeNFTData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCaller) EncodeTransferBridgeNFTData(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "encodeTransferBridgeNFTData", destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, tokenId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTransferBridgeNFTData is a free data retrieval call binding the contract method 0xd861fd07.
//
// Solidity: function encodeTransferBridgeNFTData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeSession) EncodeTransferBridgeNFTData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeTransferBridgeNFTData(&_ERC721Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, tokenId)
}

// EncodeTransferBridgeNFTData is a free data retrieval call binding the contract method 0xd861fd07.
//
// Solidity: function encodeTransferBridgeNFTData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, uint256 tokenId) pure returns(bytes)
func (_ERC721Bridge *ERC721BridgeCallerSession) EncodeTransferBridgeNFTData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, tokenId *big.Int) ([]byte, error) {
	return _ERC721Bridge.Contract.EncodeTransferBridgeNFTData(&_ERC721Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, tokenId)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCaller) GetMinTeleporterVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "getMinTeleporterVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC721Bridge.Contract.GetMinTeleporterVersion(&_ERC721Bridge.CallOpts)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC721Bridge *ERC721BridgeCallerSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC721Bridge.Contract.GetMinTeleporterVersion(&_ERC721Bridge.CallOpts)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC721Bridge *ERC721BridgeCaller) IsTeleporterAddressPaused(opts *bind.CallOpts, teleporterAddress common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "isTeleporterAddressPaused", teleporterAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC721Bridge *ERC721BridgeSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC721Bridge.Contract.IsTeleporterAddressPaused(&_ERC721Bridge.CallOpts, teleporterAddress)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC721Bridge *ERC721BridgeCallerSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC721Bridge.Contract.IsTeleporterAddressPaused(&_ERC721Bridge.CallOpts, teleporterAddress)
}

// NativeToBridgedNFT is a free data retrieval call binding the contract method 0x2e6d3ad2.
//
// Solidity: function nativeToBridgedNFT(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeNFTAddress)
func (_ERC721Bridge *ERC721BridgeCaller) NativeToBridgedNFT(opts *bind.CallOpts, nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "nativeToBridgedNFT", nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeToBridgedNFT is a free data retrieval call binding the contract method 0x2e6d3ad2.
//
// Solidity: function nativeToBridgedNFT(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeNFTAddress)
func (_ERC721Bridge *ERC721BridgeSession) NativeToBridgedNFT(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ERC721Bridge.Contract.NativeToBridgedNFT(&_ERC721Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// NativeToBridgedNFT is a free data retrieval call binding the contract method 0x2e6d3ad2.
//
// Solidity: function nativeToBridgedNFT(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeNFTAddress)
func (_ERC721Bridge *ERC721BridgeCallerSession) NativeToBridgedNFT(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ERC721Bridge.Contract.NativeToBridgedNFT(&_ERC721Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC721Bridge *ERC721BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC721Bridge *ERC721BridgeSession) Owner() (common.Address, error) {
	return _ERC721Bridge.Contract.Owner(&_ERC721Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC721Bridge *ERC721BridgeCallerSession) Owner() (common.Address, error) {
	return _ERC721Bridge.Contract.Owner(&_ERC721Bridge.CallOpts)
}

// SubmittedBridgeNFTCreations is a free data retrieval call binding the contract method 0x1278498c.
//
// Solidity: function submittedBridgeNFTCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address erc721Contract) view returns(bool submitted)
func (_ERC721Bridge *ERC721BridgeCaller) SubmittedBridgeNFTCreations(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, erc721Contract common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "submittedBridgeNFTCreations", destinationBlockchainID, destinationBridgeAddress, erc721Contract)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SubmittedBridgeNFTCreations is a free data retrieval call binding the contract method 0x1278498c.
//
// Solidity: function submittedBridgeNFTCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address erc721Contract) view returns(bool submitted)
func (_ERC721Bridge *ERC721BridgeSession) SubmittedBridgeNFTCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, erc721Contract common.Address) (bool, error) {
	return _ERC721Bridge.Contract.SubmittedBridgeNFTCreations(&_ERC721Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, erc721Contract)
}

// SubmittedBridgeNFTCreations is a free data retrieval call binding the contract method 0x1278498c.
//
// Solidity: function submittedBridgeNFTCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address erc721Contract) view returns(bool submitted)
func (_ERC721Bridge *ERC721BridgeCallerSession) SubmittedBridgeNFTCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, erc721Contract common.Address) (bool, error) {
	return _ERC721Bridge.Contract.SubmittedBridgeNFTCreations(&_ERC721Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, erc721Contract)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC721Bridge *ERC721BridgeCaller) TeleporterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC721Bridge.contract.Call(opts, &out, "teleporterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC721Bridge *ERC721BridgeSession) TeleporterRegistry() (common.Address, error) {
	return _ERC721Bridge.Contract.TeleporterRegistry(&_ERC721Bridge.CallOpts)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC721Bridge *ERC721BridgeCallerSession) TeleporterRegistry() (common.Address, error) {
	return _ERC721Bridge.Contract.TeleporterRegistry(&_ERC721Bridge.CallOpts)
}

// BridgeToken is a paid mutator transaction binding the contract method 0xa5ad4a0b.
//
// Solidity: function bridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nftContractAddress, address recipient, uint256 tokenId, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) BridgeToken(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nftContractAddress common.Address, recipient common.Address, tokenId *big.Int, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "bridgeToken", destinationBlockchainID, destinationBridgeAddress, nftContractAddress, recipient, tokenId, messageFeeAsset, messageFeeAmount)
}

// BridgeToken is a paid mutator transaction binding the contract method 0xa5ad4a0b.
//
// Solidity: function bridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nftContractAddress, address recipient, uint256 tokenId, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeSession) BridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nftContractAddress common.Address, recipient common.Address, tokenId *big.Int, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.BridgeToken(&_ERC721Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nftContractAddress, recipient, tokenId, messageFeeAsset, messageFeeAmount)
}

// BridgeToken is a paid mutator transaction binding the contract method 0xa5ad4a0b.
//
// Solidity: function bridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nftContractAddress, address recipient, uint256 tokenId, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) BridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nftContractAddress common.Address, recipient common.Address, tokenId *big.Int, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.BridgeToken(&_ERC721Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nftContractAddress, recipient, tokenId, messageFeeAsset, messageFeeAmount)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Bridge *ERC721BridgeTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Bridge *ERC721BridgeSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.OnERC721Received(&_ERC721Bridge.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Bridge *ERC721BridgeTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.OnERC721Received(&_ERC721Bridge.TransactOpts, arg0, arg1, arg2, arg3)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) PauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "pauseTeleporterAddress", teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.PauseTeleporterAddress(&_ERC721Bridge.TransactOpts, teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.PauseTeleporterAddress(&_ERC721Bridge.TransactOpts, teleporterAddress)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) ReceiveTeleporterMessage(opts *bind.TransactOpts, sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "receiveTeleporterMessage", sourceBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC721Bridge *ERC721BridgeSession) ReceiveTeleporterMessage(sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.ReceiveTeleporterMessage(&_ERC721Bridge.TransactOpts, sourceBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) ReceiveTeleporterMessage(sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.ReceiveTeleporterMessage(&_ERC721Bridge.TransactOpts, sourceBlockchainID, originSenderAddress, message)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC721Bridge *ERC721BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC721Bridge *ERC721BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC721Bridge.Contract.RenounceOwnership(&_ERC721Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC721Bridge.Contract.RenounceOwnership(&_ERC721Bridge.TransactOpts)
}

// SubmitCreateBridgeNFT is a paid mutator transaction binding the contract method 0x165ab182.
//
// Solidity: function submitCreateBridgeNFT(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContract, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) SubmitCreateBridgeNFT(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContract common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "submitCreateBridgeNFT", destinationBlockchainID, destinationBridgeAddress, nativeContract, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeNFT is a paid mutator transaction binding the contract method 0x165ab182.
//
// Solidity: function submitCreateBridgeNFT(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContract, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeSession) SubmitCreateBridgeNFT(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContract common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.SubmitCreateBridgeNFT(&_ERC721Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeContract, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeNFT is a paid mutator transaction binding the contract method 0x165ab182.
//
// Solidity: function submitCreateBridgeNFT(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContract, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) SubmitCreateBridgeNFT(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContract common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.SubmitCreateBridgeNFT(&_ERC721Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeContract, messageFeeAsset, messageFeeAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC721Bridge *ERC721BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.TransferOwnership(&_ERC721Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.TransferOwnership(&_ERC721Bridge.TransactOpts, newOwner)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) UnpauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "unpauseTeleporterAddress", teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.UnpauseTeleporterAddress(&_ERC721Bridge.TransactOpts, teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.UnpauseTeleporterAddress(&_ERC721Bridge.TransactOpts, teleporterAddress)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC721Bridge *ERC721BridgeTransactor) UpdateMinTeleporterVersion(opts *bind.TransactOpts, version *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.contract.Transact(opts, "updateMinTeleporterVersion", version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC721Bridge *ERC721BridgeSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.UpdateMinTeleporterVersion(&_ERC721Bridge.TransactOpts, version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC721Bridge *ERC721BridgeTransactorSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC721Bridge.Contract.UpdateMinTeleporterVersion(&_ERC721Bridge.TransactOpts, version)
}

// ERC721BridgeBridgeTokenIterator is returned from FilterBridgeToken and is used to iterate over the raw logs and unpacked data for BridgeToken events raised by the ERC721Bridge contract.
type ERC721BridgeBridgeTokenIterator struct {
	Event *ERC721BridgeBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeBridgeToken represents a BridgeToken event raised by the ERC721Bridge contract.
type ERC721BridgeBridgeToken struct {
	TokenContractAddress     common.Address
	DestinationBlockchainID  [32]byte
	TeleporterMessageID      [32]byte
	DestinationBridgeAddress common.Address
	Recipient                common.Address
	TokenId                  *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterBridgeToken is a free log retrieval operation binding the contract event 0x2295bdab44edbfc21d008b377f68ef0205bb4cbdf293be5013d9d56790df9be1.
//
// Solidity: event BridgeToken(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, bytes32 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterBridgeToken(opts *bind.FilterOpts, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID [][32]byte) (*ERC721BridgeBridgeTokenIterator, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "BridgeToken", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeBridgeTokenIterator{contract: _ERC721Bridge.contract, event: "BridgeToken", logs: logs, sub: sub}, nil
}

// WatchBridgeToken is a free log subscription operation binding the contract event 0x2295bdab44edbfc21d008b377f68ef0205bb4cbdf293be5013d9d56790df9be1.
//
// Solidity: event BridgeToken(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, bytes32 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchBridgeToken(opts *bind.WatchOpts, sink chan<- *ERC721BridgeBridgeToken, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID [][32]byte) (event.Subscription, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "BridgeToken", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeBridgeToken)
				if err := _ERC721Bridge.contract.UnpackLog(event, "BridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeToken is a log parse operation binding the contract event 0x2295bdab44edbfc21d008b377f68ef0205bb4cbdf293be5013d9d56790df9be1.
//
// Solidity: event BridgeToken(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, bytes32 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseBridgeToken(log types.Log) (*ERC721BridgeBridgeToken, error) {
	event := new(ERC721BridgeBridgeToken)
	if err := _ERC721Bridge.contract.UnpackLog(event, "BridgeToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeCreateBridgeNFTIterator is returned from FilterCreateBridgeNFT and is used to iterate over the raw logs and unpacked data for CreateBridgeNFT events raised by the ERC721Bridge contract.
type ERC721BridgeCreateBridgeNFTIterator struct {
	Event *ERC721BridgeCreateBridgeNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeCreateBridgeNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeCreateBridgeNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeCreateBridgeNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeCreateBridgeNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeCreateBridgeNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeCreateBridgeNFT represents a CreateBridgeNFT event raised by the ERC721Bridge contract.
type ERC721BridgeCreateBridgeNFT struct {
	NativeBlockchainID    [32]byte
	NativeBridgeAddress   common.Address
	NativeContractAddress common.Address
	BridgeTokenAddress    common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterCreateBridgeNFT is a free log retrieval operation binding the contract event 0xc1746356cd263ac52ed397d26ef7f2d8209d8b4955b9f6d862d7ff3401802e1d.
//
// Solidity: event CreateBridgeNFT(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterCreateBridgeNFT(opts *bind.FilterOpts, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ERC721BridgeCreateBridgeNFTIterator, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "CreateBridgeNFT", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeCreateBridgeNFTIterator{contract: _ERC721Bridge.contract, event: "CreateBridgeNFT", logs: logs, sub: sub}, nil
}

// WatchCreateBridgeNFT is a free log subscription operation binding the contract event 0xc1746356cd263ac52ed397d26ef7f2d8209d8b4955b9f6d862d7ff3401802e1d.
//
// Solidity: event CreateBridgeNFT(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchCreateBridgeNFT(opts *bind.WatchOpts, sink chan<- *ERC721BridgeCreateBridgeNFT, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "CreateBridgeNFT", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeCreateBridgeNFT)
				if err := _ERC721Bridge.contract.UnpackLog(event, "CreateBridgeNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateBridgeNFT is a log parse operation binding the contract event 0xc1746356cd263ac52ed397d26ef7f2d8209d8b4955b9f6d862d7ff3401802e1d.
//
// Solidity: event CreateBridgeNFT(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseCreateBridgeNFT(log types.Log) (*ERC721BridgeCreateBridgeNFT, error) {
	event := new(ERC721BridgeCreateBridgeNFT)
	if err := _ERC721Bridge.contract.UnpackLog(event, "CreateBridgeNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeMinTeleporterVersionUpdatedIterator is returned from FilterMinTeleporterVersionUpdated and is used to iterate over the raw logs and unpacked data for MinTeleporterVersionUpdated events raised by the ERC721Bridge contract.
type ERC721BridgeMinTeleporterVersionUpdatedIterator struct {
	Event *ERC721BridgeMinTeleporterVersionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeMinTeleporterVersionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeMinTeleporterVersionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeMinTeleporterVersionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeMinTeleporterVersionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeMinTeleporterVersionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeMinTeleporterVersionUpdated represents a MinTeleporterVersionUpdated event raised by the ERC721Bridge contract.
type ERC721BridgeMinTeleporterVersionUpdated struct {
	OldMinTeleporterVersion *big.Int
	NewMinTeleporterVersion *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterMinTeleporterVersionUpdated is a free log retrieval operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterMinTeleporterVersionUpdated(opts *bind.FilterOpts, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (*ERC721BridgeMinTeleporterVersionUpdatedIterator, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeMinTeleporterVersionUpdatedIterator{contract: _ERC721Bridge.contract, event: "MinTeleporterVersionUpdated", logs: logs, sub: sub}, nil
}

// WatchMinTeleporterVersionUpdated is a free log subscription operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchMinTeleporterVersionUpdated(opts *bind.WatchOpts, sink chan<- *ERC721BridgeMinTeleporterVersionUpdated, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (event.Subscription, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeMinTeleporterVersionUpdated)
				if err := _ERC721Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinTeleporterVersionUpdated is a log parse operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseMinTeleporterVersionUpdated(log types.Log) (*ERC721BridgeMinTeleporterVersionUpdated, error) {
	event := new(ERC721BridgeMinTeleporterVersionUpdated)
	if err := _ERC721Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeMintBridgeNFTIterator is returned from FilterMintBridgeNFT and is used to iterate over the raw logs and unpacked data for MintBridgeNFT events raised by the ERC721Bridge contract.
type ERC721BridgeMintBridgeNFTIterator struct {
	Event *ERC721BridgeMintBridgeNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeMintBridgeNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeMintBridgeNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeMintBridgeNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeMintBridgeNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeMintBridgeNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeMintBridgeNFT represents a MintBridgeNFT event raised by the ERC721Bridge contract.
type ERC721BridgeMintBridgeNFT struct {
	ContractAddress common.Address
	Recipient       common.Address
	TokenId         *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMintBridgeNFT is a free log retrieval operation binding the contract event 0x29613301ec2f36146fa482b8ac7c7589ced3f5ddae8de06ad25c3ee021555b52.
//
// Solidity: event MintBridgeNFT(address indexed contractAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterMintBridgeNFT(opts *bind.FilterOpts, contractAddress []common.Address) (*ERC721BridgeMintBridgeNFTIterator, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "MintBridgeNFT", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeMintBridgeNFTIterator{contract: _ERC721Bridge.contract, event: "MintBridgeNFT", logs: logs, sub: sub}, nil
}

// WatchMintBridgeNFT is a free log subscription operation binding the contract event 0x29613301ec2f36146fa482b8ac7c7589ced3f5ddae8de06ad25c3ee021555b52.
//
// Solidity: event MintBridgeNFT(address indexed contractAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchMintBridgeNFT(opts *bind.WatchOpts, sink chan<- *ERC721BridgeMintBridgeNFT, contractAddress []common.Address) (event.Subscription, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "MintBridgeNFT", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeMintBridgeNFT)
				if err := _ERC721Bridge.contract.UnpackLog(event, "MintBridgeNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintBridgeNFT is a log parse operation binding the contract event 0x29613301ec2f36146fa482b8ac7c7589ced3f5ddae8de06ad25c3ee021555b52.
//
// Solidity: event MintBridgeNFT(address indexed contractAddress, address recipient, uint256 tokenId)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseMintBridgeNFT(log types.Log) (*ERC721BridgeMintBridgeNFT, error) {
	event := new(ERC721BridgeMintBridgeNFT)
	if err := _ERC721Bridge.contract.UnpackLog(event, "MintBridgeNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC721Bridge contract.
type ERC721BridgeOwnershipTransferredIterator struct {
	Event *ERC721BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the ERC721Bridge contract.
type ERC721BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC721BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeOwnershipTransferredIterator{contract: _ERC721Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC721BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeOwnershipTransferred)
				if err := _ERC721Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*ERC721BridgeOwnershipTransferred, error) {
	event := new(ERC721BridgeOwnershipTransferred)
	if err := _ERC721Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeSubmitCreateBridgeNFTIterator is returned from FilterSubmitCreateBridgeNFT and is used to iterate over the raw logs and unpacked data for SubmitCreateBridgeNFT events raised by the ERC721Bridge contract.
type ERC721BridgeSubmitCreateBridgeNFTIterator struct {
	Event *ERC721BridgeSubmitCreateBridgeNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeSubmitCreateBridgeNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeSubmitCreateBridgeNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeSubmitCreateBridgeNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeSubmitCreateBridgeNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeSubmitCreateBridgeNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeSubmitCreateBridgeNFT represents a SubmitCreateBridgeNFT event raised by the ERC721Bridge contract.
type ERC721BridgeSubmitCreateBridgeNFT struct {
	DestinationBlockchainID  [32]byte
	DestinationBridgeAddress common.Address
	NativeContractAddress    common.Address
	TeleporterMessageID      [32]byte
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSubmitCreateBridgeNFT is a free log retrieval operation binding the contract event 0x87342d702ec76657e8e796fb6d8d794a35e7812fc3cabade834daf9bee0ce910.
//
// Solidity: event SubmitCreateBridgeNFT(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, bytes32 teleporterMessageID)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterSubmitCreateBridgeNFT(opts *bind.FilterOpts, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ERC721BridgeSubmitCreateBridgeNFTIterator, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "SubmitCreateBridgeNFT", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeSubmitCreateBridgeNFTIterator{contract: _ERC721Bridge.contract, event: "SubmitCreateBridgeNFT", logs: logs, sub: sub}, nil
}

// WatchSubmitCreateBridgeNFT is a free log subscription operation binding the contract event 0x87342d702ec76657e8e796fb6d8d794a35e7812fc3cabade834daf9bee0ce910.
//
// Solidity: event SubmitCreateBridgeNFT(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, bytes32 teleporterMessageID)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchSubmitCreateBridgeNFT(opts *bind.WatchOpts, sink chan<- *ERC721BridgeSubmitCreateBridgeNFT, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "SubmitCreateBridgeNFT", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeSubmitCreateBridgeNFT)
				if err := _ERC721Bridge.contract.UnpackLog(event, "SubmitCreateBridgeNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitCreateBridgeNFT is a log parse operation binding the contract event 0x87342d702ec76657e8e796fb6d8d794a35e7812fc3cabade834daf9bee0ce910.
//
// Solidity: event SubmitCreateBridgeNFT(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, bytes32 teleporterMessageID)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseSubmitCreateBridgeNFT(log types.Log) (*ERC721BridgeSubmitCreateBridgeNFT, error) {
	event := new(ERC721BridgeSubmitCreateBridgeNFT)
	if err := _ERC721Bridge.contract.UnpackLog(event, "SubmitCreateBridgeNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeTeleporterAddressPausedIterator is returned from FilterTeleporterAddressPaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressPaused events raised by the ERC721Bridge contract.
type ERC721BridgeTeleporterAddressPausedIterator struct {
	Event *ERC721BridgeTeleporterAddressPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeTeleporterAddressPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeTeleporterAddressPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeTeleporterAddressPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeTeleporterAddressPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeTeleporterAddressPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeTeleporterAddressPaused represents a TeleporterAddressPaused event raised by the ERC721Bridge contract.
type ERC721BridgeTeleporterAddressPaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressPaused is a free log retrieval operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterTeleporterAddressPaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC721BridgeTeleporterAddressPausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeTeleporterAddressPausedIterator{contract: _ERC721Bridge.contract, event: "TeleporterAddressPaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressPaused is a free log subscription operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchTeleporterAddressPaused(opts *bind.WatchOpts, sink chan<- *ERC721BridgeTeleporterAddressPaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeTeleporterAddressPaused)
				if err := _ERC721Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressPaused is a log parse operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseTeleporterAddressPaused(log types.Log) (*ERC721BridgeTeleporterAddressPaused, error) {
	event := new(ERC721BridgeTeleporterAddressPaused)
	if err := _ERC721Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721BridgeTeleporterAddressUnpausedIterator is returned from FilterTeleporterAddressUnpaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressUnpaused events raised by the ERC721Bridge contract.
type ERC721BridgeTeleporterAddressUnpausedIterator struct {
	Event *ERC721BridgeTeleporterAddressUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721BridgeTeleporterAddressUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721BridgeTeleporterAddressUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721BridgeTeleporterAddressUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721BridgeTeleporterAddressUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721BridgeTeleporterAddressUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721BridgeTeleporterAddressUnpaused represents a TeleporterAddressUnpaused event raised by the ERC721Bridge contract.
type ERC721BridgeTeleporterAddressUnpaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressUnpaused is a free log retrieval operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) FilterTeleporterAddressUnpaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC721BridgeTeleporterAddressUnpausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.FilterLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC721BridgeTeleporterAddressUnpausedIterator{contract: _ERC721Bridge.contract, event: "TeleporterAddressUnpaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressUnpaused is a free log subscription operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) WatchTeleporterAddressUnpaused(opts *bind.WatchOpts, sink chan<- *ERC721BridgeTeleporterAddressUnpaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC721Bridge.contract.WatchLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721BridgeTeleporterAddressUnpaused)
				if err := _ERC721Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressUnpaused is a log parse operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC721Bridge *ERC721BridgeFilterer) ParseTeleporterAddressUnpaused(log types.Log) (*ERC721BridgeTeleporterAddressUnpaused, error) {
	event := new(ERC721BridgeTeleporterAddressUnpaused)
	if err := _ERC721Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
